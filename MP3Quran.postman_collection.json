{
	"info": {
		"_postman_id": "2e3c54f5-3a21-4b68-8af8-c2c5059b76cd",
		"name": "MP3Quran",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28045329",
		"_collection_link": "https://winter-flare-26655.postman.co/workspace/MP3Quran~b3e953b7-6c3b-44be-ad46-2599209757c9/collection/28045329-2e3c54f5-3a21-4b68-8af8-c2c5059b76cd?action=share&source=collection_link&creator=28045329"
	},
	"item": [
		{
			"name": "1-Languages",
			"item": [
				{
					"name": "1-Languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Body Propereties\r",
									"pm.test(\"2-Check Response Body Includes LAnguages\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"language\")\r",
									"})\r",
									"\r",
									"pm.test(\"3-Check LAnguages in response include ID\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"4-Check LAnguages in response include language\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"language\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"5-Check LAnguages in response include native\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"native\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"6-Check LAnguages in response include surah\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"surah\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-Check LAnguages in response include rewayah\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"rewayah\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"8-Check LAnguages in response include reciters\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"reciters\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"9-Check LAnguages in response include radios\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"radios\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"10-Check LAnguages in response include tafasir\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).language[i]).to.have.property(\"tafasir\")\r",
									"    }\r",
									"})\r",
									"\r",
									"//Check That Response Body Properties Not Equal null\r",
									"pm.test(\"11- Check language in response !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).language).to.not.equal(null)\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"12- Check ID oflanguage in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].id).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"13- Check LAnguage  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].language).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"14- Check native  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].native).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"15- Check surah  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].surah).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"pm.test(\"16- Check rewayah  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].rewayah).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"17- Check reciters  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].reciters).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"18- Check radios  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].radios).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"19- Check tafasir  of language in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"     {\r",
									"    pm.expect(JSON.parse(responseBody).language[i].tafasir).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"//Check DataType of Responsebofy properies\r",
									"\r",
									"pm.test(\"20- Check Datatype of ID in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].id).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"21- Check Datatype of language in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].language).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"22- Check Datatype of native in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].native).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"23- Check Datatype of surah in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].surah).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"24- Check Datatype of rewayah in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].rewayah).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"25- Check Datatype of reciters in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].reciters).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"26- Check Datatype of radios in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].radios).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"27- Check Datatype of tafasir in LAnguage\",function(){\r",
									"for(var i=0; i<JSON.parse(responseBody).language.length; i++)\r",
									"\r",
									"{\r",
									"  pm.expect(typeof JSON.parse(responseBody).language[i].tafasir).to.be.equal(\"string\")\r",
									"}\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/languages",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"languages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2-Surah",
			"item": [
				{
					"name": "2-Surah",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Body Propereties\r",
									"pm.test(\"2-Check Response Body Includes Suwar\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"suwar\")\r",
									"})\r",
									"\r",
									"pm.test(\"3-Check Suwar in response include ID\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).suwar[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"4-Check Suwar in response include name\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).suwar[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"5-Check Suwar in response include Start Page\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).suwar[i]).to.have.property(\"start_page\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"6-Check suwar in response include end page\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).suwar[i]).to.have.property(\"end_page\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"7-Check suwar in response include Makkia\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).suwar[i]).to.have.property(\"makkia\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"8-Check suwar in response include type\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"          pm.expect(JSON.parse(responseBody).suwar[i]).to.have.property(\"type\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check That Response BOdy Properties Has no Null\r",
									"pm.test(\"9-Check Swur Value in response !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).suwar).to.not.equal(null)\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"10-Check ID Value in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).suwar[i].id).to.not.equal(null)\r",
									"     }\r",
									"   \r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"11-Check name Value in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).suwar[i].name).to.not.equal(null)\r",
									"     }\r",
									"   \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"12-Check Start page Value in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).suwar[i].start_page).to.not.equal(null)\r",
									"     }\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"13-Check End page Value in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).suwar[i].end_page).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"14-Check Makkia Value in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).suwar[i].makkia).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"15-Check Type Value in response !=null\",function(){\r",
									"\r",
									"     for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).suwar[i].type).to.not.equal(null)\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Check REsponse Values Datatype\r",
									"\r",
									"pm.test(\"16- Check ID datatype\",function(){\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).suwar[i].id).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"17- Check name datatype\",function(){\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).suwar[i].name).to.be.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"18- Check start page datatype\",function(){\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).suwar[i].start_page).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"19- Check end page datatype\",function(){\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).suwar[i].end_page).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"20- Check Makkia datatype\",function(){\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).suwar[i].makkia).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"21- Check Type datatype\",function(){\r",
									"    for(var i=0; i<JSON.parse(responseBody).suwar.length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).suwar[i].type).to.be.equal(\"number\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/suwar",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"suwar"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3-Rewayah",
			"item": [
				{
					"name": "3-Rewayah",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Body Propereties\r",
									"pm.test(\"2-Check Response Body Includes riwayat\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-Check Response Body Includes id inside riwayat\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"     for(var i=0; i<JSON.parse(responseBody).riwayat.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).riwayat[i]).to.have.property(\"id\") \r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-Check Response Body Includes name inside Riwayat\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"     for(var i=0; i<JSON.parse(responseBody).riwayat.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).riwayat[i]).to.have.property(\"name\") \r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Check That Response Body properties has no null\r",
									"pm.test(\"5-Check ID of Riwayat !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"     for(var i=0; i<JSON.parse(responseBody).riwayat.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).riwayat[i].id).to.not.equal(null) \r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"6-Check NAme of Riwayat !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"     for(var i=0; i<JSON.parse(responseBody).riwayat.length; i++)\r",
									"     {\r",
									"        pm.expect(JSON.parse(responseBody).riwayat[i].name).to.not.equal(null) \r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"//Check Response Values Datatype\r",
									"\r",
									"pm.test(\"7-Check Datatyoe of ID\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"     for(var i=0; i<JSON.parse(responseBody).riwayat.length; i++)\r",
									"     {\r",
									"        pm.expect(typeof JSON.parse(responseBody).riwayat[i].id).to.be.equal(\"number\") \r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"6-Check Datatype of name\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"riwayat\")\r",
									"     for(var i=0; i<JSON.parse(responseBody).riwayat.length; i++)\r",
									"     {\r",
									"        pm.expect( typeof JSON.parse(responseBody).riwayat[i].name).to.be.equal(\"string\")\r",
									"     }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/riwayat",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"riwayat"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4-Moshaf",
			"item": [
				{
					"name": "4-Moshaf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate RsponseBody Properties\r",
									"\r",
									"pm.test(\"2- Check Response Body includes ID\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"3- Check Response Body includes moshaf_type\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"moshaf_type\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"4- Check Response Body includes moshaf_id\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"moshaf_id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"5- Check Response Body includes name\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"//Check Response Body Values not null\r",
									"pm.test(\"6- Check id value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7- Check moshaf_type value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i].moshaf_type).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"8- Check moshaf_id value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i].moshaf_id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"9- Check moshaf_id value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i].moshaf_id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"10- Check name value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"//Check Response Body Values Datatype\r",
									"pm.test(\"10-Check ID datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"11-Check moshaf_type datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].moshaf_type).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"12-Check moshaf_id datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].moshaf_id).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"13-Check name datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).length; i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name).to.be.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/moshaf?language=ar",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"moshaf"
							],
							"query": [
								{
									"key": "language",
									"value": "ar"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5-Reciters",
			"item": [
				{
					"name": "5-Reciters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|5-Reciters|-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check REsponse Body Properties\r",
									"pm.test(\"2-|5-Reciters|Validate that response Body includes reciters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"reciters\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|5-Reciters|Validate that reciters has ID\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).reciters[i]).to.have.property(\"id\")\r",
									"    }\r",
									"    \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|5-Reciters|Validate that reciters has name\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).reciters[i]).to.have.property(\"name\")\r",
									"    }\r",
									"    \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-Validate that reciters has letter\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).reciters[i]).to.have.property(\"letter\")\r",
									"    } \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"6-|5-Reciters|Validate that reciters has moshaf\",function(){\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).reciters[i]).to.have.property(\"moshaf\")\r",
									"    }\r",
									"})\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"pm.test(\"7-|5-Reciters|Validate that  moshaf has id \",function(){      \r",
									" pm.expect(JSON.parse(responseBody).reciters[i].moshaf[0]).to.have.property(\"id\")\r",
									"})\r",
									"    }\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"pm.test(\"8-|5-Reciters|5-Reciters|Validate that  moshaf has id \",function(){      \r",
									" pm.expect(JSON.parse(responseBody).reciters[i].moshaf[0]).to.have.property(\"name\")\r",
									"})\r",
									"    }\r",
									"\r",
									"    for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"pm.test(\"9-|5-Reciters|Validate that  moshaf has id \",function(){      \r",
									" pm.expect(JSON.parse(responseBody).reciters[i].moshaf[0]).to.have.property(\"server\")\r",
									"})\r",
									"    }\r",
									"\r",
									"      for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"pm.test(\"10-|5-Reciters|Validate that  moshaf has id \",function(){      \r",
									" pm.expect(JSON.parse(responseBody).reciters[i].moshaf[0]).to.have.property(\"surah_total\")\r",
									"})\r",
									"    }\r",
									"\r",
									"       for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"pm.test(\"10-|5-Reciters|Validate that  moshaf has id \",function(){      \r",
									" pm.expect(JSON.parse(responseBody).reciters[i].moshaf[0]).to.have.property(\"moshaf_type\")\r",
									"})\r",
									"    }\r",
									"\r",
									"\r",
									"          for(var i=0; i<JSON.parse(responseBody).reciters.length; i++)\r",
									"    {\r",
									"pm.test(\"11-|5-Reciters|Validate that  moshaf has id \",function(){      \r",
									" pm.expect(JSON.parse(responseBody).reciters[i].moshaf[0]).to.have.property(\"surah_list\")\r",
									"})\r",
									"    }\r",
									"\r",
									"\r",
									"    //Check Response Body Values Datatype\r",
									"      for(var i=0; i<JSON.parse(responseBody).reciters.length; i++){\r",
									"\r",
									"          pm.test(\"12-|5-Reciters| Check Reciters Id Datatype\",function(){\r",
									"              pm.expect(typeof JSON.parse(responseBody).reciters[i].id).to.be.equal(\"number\")\r",
									"          })\r",
									"      }\r",
									"\r",
									"\r",
									"      for(var i=0; i<JSON.parse(responseBody).reciters.length; i++){\r",
									"\r",
									"          pm.test(\"13-|5-Reciters| Check Reciters name Datatype\",function(){\r",
									"              pm.expect(typeof JSON.parse(responseBody).reciters[i].name).to.be.equal(\"string\")\r",
									"          })\r",
									"      }\r",
									"\r",
									"\r",
									"       for(var i=0; i<JSON.parse(responseBody).reciters.length; i++){\r",
									"\r",
									"          pm.test(\"14-|5-Reciters| Check Reciters Letter Datatype\",function(){\r",
									"              pm.expect(typeof JSON.parse(responseBody).reciters[i].letter).to.be.equal(\"string\")\r",
									"          })\r",
									"      }\r",
									"\r",
									"\r",
									"\r",
									"      for(var i=0; i<JSON.parse(responseBody).reciters.length; i++){\r",
									"\r",
									"          pm.test(\"15-|5-Reciters| Check Moshaf ID Datatype\",function(){\r",
									"              pm.expect(typeof JSON.parse(responseBody).reciters[i].moshaf[0].id).to.be.equal(\"number\")\r",
									"          })\r",
									"      }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"        for(var i=0; i<JSON.parse(responseBody).reciters.length; i++){\r",
									"\r",
									"          pm.test(\"15-|5-Reciters| Check Moshaf name Datatype\",function(){\r",
									"              pm.expect(typeof JSON.parse(responseBody).reciters[i].moshaf[0].name).to.be.equal(\"string\")\r",
									"          })\r",
									"      }\r",
									"\r",
									"\r",
									"      for(var i=0; i<JSON.parse(responseBody).reciters.length; i++){\r",
									"\r",
									"          pm.test(\"16-|5-Reciters| Check Moshaf name Datatype\",function(){\r",
									"              pm.expect(typeof JSON.parse(responseBody).reciters[i].moshaf[0].server).to.be.equal(\"string\")\r",
									"          })\r",
									"      }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/reciters?language=eng",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"reciters"
							],
							"query": [
								{
									"key": "language",
									"value": "eng"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6-RecentRead",
			"item": [
				{
					"name": "6-RecentRead",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|6-RecentRead|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Body Properties\r",
									"pm.test(\"2-|6-RecentRead|Check That responseBody includes Reads\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"reads\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|6-RecentRead|Check That Reads includes ID\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"4-|6-RecentRead|Check That Reads includes name\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"5-|6-RecentRead|Check That Reads includes Letter\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i]).to.have.property(\"letter\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"6-|6-RecentRead|Check That Reads includes recent_date\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i]).to.have.property(\"recent_date\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|6-RecentRead|Check That Reads includes moshaf\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i]).to.have.property(\"moshaf\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"8-|6-RecentRead|Check That Moshaf includes id\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i].moshaf[0]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"9-|6-RecentRead|Check That That Moshaf includes name\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i].moshaf[0]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"10-|6-RecentRead|Check That That Moshaf includes server\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i].moshaf[0]).to.have.property(\"server\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"11-|6-RecentRead|Check That That Moshaf includes surah_total\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i].moshaf[0]).to.have.property(\"surah_total\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"12-|6-RecentRead|Check That That Moshaf includes moshaf_type\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i].moshaf[0]).to.have.property(\"moshaf_type\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"13-|6-RecentRead|Check That That Moshaf includes surah_list\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									"    {\r",
									"         pm.expect(JSON.parse(responseBody).reads[i].moshaf[0]).to.have.property(\"moshaf_type\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Check Response Body Values Datatype\r",
									"\r",
									" for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									" {\r",
									"     pm.test(\"14-|6-RecentRead|Check Reads ID Datatype\",function(){\r",
									"         pm.expect(typeof JSON.parse(responseBody).reads[i].id).to.be.equal(\"number\")\r",
									"     })\r",
									" }\r",
									"\r",
									"\r",
									"  for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									" {\r",
									"     pm.test(\"14-|6-RecentRead|Check Reads name Datatype\",function(){\r",
									"         pm.expect(typeof JSON.parse(responseBody).reads[i].name).to.be.equal(\"string\")\r",
									"     })\r",
									" }\r",
									"\r",
									"\r",
									"\r",
									"  for(var i=0;i<JSON.parse(responseBody).reads.length;i++)\r",
									" {\r",
									"     pm.test(\"14-|6-RecentRead|Check Reads Letter Datatype\",function(){\r",
									"         pm.expect(typeof JSON.parse(responseBody).reads[i].letter).to.be.equal(\"string\")\r",
									"     })\r",
									" }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/recent_reads",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"recent_reads"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7-LiveTV",
			"item": [
				{
					"name": "7-LiveTv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|7-LiveTv|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|7-LiveTv| validate that response body includes Live TV\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"livetv\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|7-LiveTv| validate that Live TV Includes ID\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).livetv[i]).to.have.property(\"id\")\r",
									"    }\r",
									"    \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|7-LiveTv| validate that Live TV Includes name\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).livetv[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"5-|7-LiveTv| validate that Live TV Includes url\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).livetv[i]).to.have.property(\"url\")\r",
									"    }\r",
									"})\r",
									"\r",
									"//Validate that response body values not equal null\r",
									"pm.test(\"6-|7-LiveTv| validate id value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).livetv[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|7-LiveTv| validate name value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).livetv[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"8-|7-LiveTv| validate name value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(JSON.parse(responseBody).livetv[i].url).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Check Response Body values Datatype\r",
									"\r",
									"pm.test(\"9-|7-LiveTv| validate id datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"    {\r",
									"        pm.expect(typeof JSON.parse(responseBody).livetv[i].id).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									" for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									" {\r",
									"pm.test(\"10-|7-LiveTv| validate name datatype\",function(){\r",
									"   \r",
									"    \r",
									"        pm.expect(typeof JSON.parse(responseBody).livetv[i].name).to.be.equal(\"string\")\r",
									"    \r",
									"})}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).livetv.length;i++)\r",
									"{\r",
									"\r",
									"\r",
									"pm.test(\"11-|7-LiveTv| validate URL datatype\",function(){\r",
									"    \r",
									"    \r",
									"        pm.expect(typeof JSON.parse(responseBody).livetv[i].url).to.be.equal(\"string\")\r",
									"    \r",
									"})}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/live-tv",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"live-tv"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8-Radios",
			"item": [
				{
					"name": "8-Radios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|8-Radios|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|8-Radios| validate that response body includes Radios\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"radios\")\r",
									"})\r",
									"\r",
									"pm.test(\"3-|8-Radios| validate that radios inludes id\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).radios[i]).to.have.property(\"id\")\r",
									"    }\r",
									"   \r",
									"})\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"{\r",
									"pm.test(\"4-|8-Radios| validate that radios inludes name\",function(){\r",
									"    \r",
									"    \r",
									"    pm.expect(JSON.parse(responseBody).radios[i]).to.have.property(\"name\")\r",
									"    \r",
									"   \r",
									"})}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|8-Radios| validate that radios inludes url\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).radios[i]).to.have.property(\"url\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"//Check That Response values not equal null\r",
									"\r",
									"pm.test(\"6-|8-Radios|Validate that ID value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).radios[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|8-Radios|Validate that name value !=null\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).radios[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"{\r",
									"pm.test(\"8-|8-Radios|Validate that url value !=null\",function(){\r",
									"    \r",
									"    \r",
									"    pm.expect(JSON.parse(responseBody).radios[i].url).to.not.equal(null)\r",
									"    \r",
									"})}\r",
									"\r",
									"\r",
									"\r",
									"//Check Response Body Datatype\r",
									"pm.test(\"9-|8-Radios|Check ID datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(typeof JSON.parse(responseBody).radios[i].id).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"10-|8-Radios|Check name datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(typeof JSON.parse(responseBody).radios[i].name).to.be.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"11-|8-Radios|Check url datatype\",function(){\r",
									"    for(var i=0;i<JSON.parse(responseBody).radios.length;i++)\r",
									"    {\r",
									"    pm.expect(typeof JSON.parse(responseBody).radios[i].url).to.be.equal(\"string\")\r",
									"    }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/radios",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"radios"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9-Tafsir",
			"item": [
				{
					"name": "9-Tafsir",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|9-Tafsir|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|9-Tafsir| validate that response body includes tafasir\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tafasir\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|9-Tafsir| validate that tafsir includes ID\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).tafasir[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"4-|9-Tafsir| validate that tafsir includes name\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).tafasir[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"5-|9-Tafsir| validate that tafsir includes url\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).tafasir[i]).to.have.property(\"url\")\r",
									"    }\r",
									"})\r",
									"\r",
									"//Validate that response body properties has no null\r",
									" for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									" {\r",
									"pm.test(\"6-|9-Tafsir| Validate that id value !=null\",function(){\r",
									"   \r",
									"   \r",
									"    \r",
									"    pm.expect(JSON.parse(responseBody).tafasir[i].id).to.not.equal(null)\r",
									"    \r",
									"})}\r",
									"\r",
									"\r",
									"pm.test(\"7-|9-Tafsir| Validate that name value !=null\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).tafasir[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"8-|9-Tafsir| Validate that url value !=null\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(JSON.parse(responseBody).tafasir[i].url).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Check Values Datatype\r",
									"\r",
									"pm.test(\"9-|9-Tafsir|Check Datatype of ID\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(typeof JSON.parse(responseBody).tafasir[i].id).to.be.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"10-|9-Tafsir|Check Datatype of name\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(typeof JSON.parse(responseBody).tafasir[i].name).to.be.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"11-|9-Tafsir|Check Datatype of url\",function(){\r",
									"   \r",
									"    for(var i=0;i<JSON.parse(responseBody).tafasir.length;i++)\r",
									"    {\r",
									"    pm.expect(typeof JSON.parse(responseBody).tafasir[i].url).to.be.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/tafasir",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tafasir"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10-Tadabor",
			"item": [
				{
					"name": "10-Tadabor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|10-Tadabor|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|10-Tadabor| validate that response body includes tadabor\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tadabor\")\r",
									"})\r",
									"\r",
									"pm.test(\"3-|10-Tadabor| validate that response body includes Array\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tadabor).to.have.property(\"1\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/tadabor",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tadabor"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11-Ayat_Timing",
			"item": [
				{
					"name": "11-AyatTiming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|11-AyatTiming|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|11-AyatTiming| validate that response body includes ayah\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"ayah\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|11-AyatTiming| validate that response body includes polygon\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"polygon\")\r",
									"})\r",
									"\r",
									"pm.test(\"4-|11-AyatTiming| validate that response body includes start_time\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"start_time\")\r",
									"})\r",
									"\r",
									"pm.test(\"5-|11-AyatTiming| validate that response body includes end_time\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"end_time\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"6-|11-AyatTiming| validate that response body includes X\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"x\")\r",
									"})\r",
									"\r",
									"pm.test(\"7-|11-AyatTiming| validate that response body includes X\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"y\")\r",
									"})\r",
									"\r",
									"pm.test(\"8-|11-AyatTiming| validate that response body includes page\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"page\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/ayat_timing?surah=2&read=5",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"ayat_timing"
							],
							"query": [
								{
									"key": "surah",
									"value": "2"
								},
								{
									"key": "read",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "12-Video_Types",
			"item": [
				{
					"name": "12-VideoTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|12-VideoTypes|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|12-VideoTypes| validate that response body includes VideoTypes\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"video_types\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|12-VideoTypes| validate that video_types includes id\",function(){\r",
									"     for(var i=0;i<JSON.parse(responseBody).video_types.length;i++)\r",
									"     {\r",
									"       pm.expect(JSON.parse(responseBody).video_types[i]).to.have.property(\"id\")\r",
									"     }\r",
									"})\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).video_types.length;i++){\r",
									"pm.test(\"4-|12-VideoTypes| validate that video_types includes video_type\",function(){\r",
									"     \r",
									"     \r",
									"       pm.expect(JSON.parse(responseBody).video_types[i]).to.have.property(\"video_type\")\r",
									"     \r",
									"})}\r",
									"\r",
									"\r",
									"//Validate Response Body values Datatype\r",
									"for(var i=0;i<JSON.parse(responseBody).video_types.length;i++)\r",
									"{\r",
									"pm.test(\"5-|12-VideoTypes| Check Datatype of ID\",function(){\r",
									"     \r",
									"     \r",
									"       pm.expect(typeof JSON.parse(responseBody).video_types[i].id).to.be.equal(\"number\")\r",
									"     \r",
									"})}\r",
									"\r",
									"\r",
									"pm.test(\"6-|12-VideoTypes| Check Datatype of Video Type\",function(){\r",
									"     for(var i=0;i<JSON.parse(responseBody).video_types.length;i++)\r",
									"     {\r",
									"       pm.expect(typeof JSON.parse(responseBody).video_types[i].video_type).to.be.equal(\"string\")\r",
									"     }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/video_types",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"video_types"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "13-Videos",
			"item": [
				{
					"name": "13-Videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|13-Videos|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response BOdy Properties\r",
									"pm.test(\"2-|13-Videos| validate that response body includes VideoTypes\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"videos\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|13-Videos| validate that video_types includes id\",function(){\r",
									"     for(var i=0;i<JSON.parse(responseBody).videos.length;i++)\r",
									"     {\r",
									"       pm.expect(JSON.parse(responseBody).videos[i]).to.have.property(\"id\")\r",
									"     }\r",
									"})\r",
									"\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).videos.length;i++)\r",
									"{\r",
									"pm.test(\"4-|13-Videos| validate that video_types includes reciter_name\",function(){\r",
									"     \r",
									"     \r",
									"       pm.expect(JSON.parse(responseBody).videos[i]).to.have.property(\"reciter_name\")\r",
									"     \r",
									"})}\r",
									"\r",
									" for(var i=0;i<JSON.parse(responseBody).videos.length;i++)\r",
									" {\r",
									"pm.test(\"5-|13-Videos| validate that video_types includes videos\",function(){\r",
									"    \r",
									"     \r",
									"       pm.expect(JSON.parse(responseBody).videos[i]).to.have.property(\"videos\")\r",
									"     \r",
									"})}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/videos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"videos"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}